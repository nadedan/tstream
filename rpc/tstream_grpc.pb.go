// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: tstream.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TriggeredStream_NewTrigger_FullMethodName = "/tstream.TriggeredStream/NewTrigger"
	TriggeredStream_Trigger_FullMethodName    = "/tstream.TriggeredStream/Trigger"
	TriggeredStream_NewStream_FullMethodName  = "/tstream.TriggeredStream/NewStream"
	TriggeredStream_Stream_FullMethodName     = "/tstream.TriggeredStream/Stream"
)

// TriggeredStreamClient is the client API for TriggeredStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggeredStreamClient interface {
	NewTrigger(ctx context.Context, in *MsgVoid, opts ...grpc.CallOption) (*MsgTrigger, error)
	Trigger(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MsgTrigger, MsgVoid], error)
	NewStream(ctx context.Context, in *MsgStreamReq, opts ...grpc.CallOption) (*MsgStream, error)
	Stream(ctx context.Context, in *MsgStream, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MsgData], error)
}

type triggeredStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggeredStreamClient(cc grpc.ClientConnInterface) TriggeredStreamClient {
	return &triggeredStreamClient{cc}
}

func (c *triggeredStreamClient) NewTrigger(ctx context.Context, in *MsgVoid, opts ...grpc.CallOption) (*MsgTrigger, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgTrigger)
	err := c.cc.Invoke(ctx, TriggeredStream_NewTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggeredStreamClient) Trigger(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MsgTrigger, MsgVoid], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TriggeredStream_ServiceDesc.Streams[0], TriggeredStream_Trigger_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MsgTrigger, MsgVoid]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TriggeredStream_TriggerClient = grpc.ClientStreamingClient[MsgTrigger, MsgVoid]

func (c *triggeredStreamClient) NewStream(ctx context.Context, in *MsgStreamReq, opts ...grpc.CallOption) (*MsgStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgStream)
	err := c.cc.Invoke(ctx, TriggeredStream_NewStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggeredStreamClient) Stream(ctx context.Context, in *MsgStream, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MsgData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TriggeredStream_ServiceDesc.Streams[1], TriggeredStream_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MsgStream, MsgData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TriggeredStream_StreamClient = grpc.ServerStreamingClient[MsgData]

// TriggeredStreamServer is the server API for TriggeredStream service.
// All implementations must embed UnimplementedTriggeredStreamServer
// for forward compatibility.
type TriggeredStreamServer interface {
	NewTrigger(context.Context, *MsgVoid) (*MsgTrigger, error)
	Trigger(grpc.ClientStreamingServer[MsgTrigger, MsgVoid]) error
	NewStream(context.Context, *MsgStreamReq) (*MsgStream, error)
	Stream(*MsgStream, grpc.ServerStreamingServer[MsgData]) error
	mustEmbedUnimplementedTriggeredStreamServer()
}

// UnimplementedTriggeredStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTriggeredStreamServer struct{}

func (UnimplementedTriggeredStreamServer) NewTrigger(context.Context, *MsgVoid) (*MsgTrigger, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTrigger not implemented")
}
func (UnimplementedTriggeredStreamServer) Trigger(grpc.ClientStreamingServer[MsgTrigger, MsgVoid]) error {
	return status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedTriggeredStreamServer) NewStream(context.Context, *MsgStreamReq) (*MsgStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStream not implemented")
}
func (UnimplementedTriggeredStreamServer) Stream(*MsgStream, grpc.ServerStreamingServer[MsgData]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTriggeredStreamServer) mustEmbedUnimplementedTriggeredStreamServer() {}
func (UnimplementedTriggeredStreamServer) testEmbeddedByValue()                         {}

// UnsafeTriggeredStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggeredStreamServer will
// result in compilation errors.
type UnsafeTriggeredStreamServer interface {
	mustEmbedUnimplementedTriggeredStreamServer()
}

func RegisterTriggeredStreamServer(s grpc.ServiceRegistrar, srv TriggeredStreamServer) {
	// If the following call pancis, it indicates UnimplementedTriggeredStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TriggeredStream_ServiceDesc, srv)
}

func _TriggeredStream_NewTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggeredStreamServer).NewTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggeredStream_NewTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggeredStreamServer).NewTrigger(ctx, req.(*MsgVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggeredStream_Trigger_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TriggeredStreamServer).Trigger(&grpc.GenericServerStream[MsgTrigger, MsgVoid]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TriggeredStream_TriggerServer = grpc.ClientStreamingServer[MsgTrigger, MsgVoid]

func _TriggeredStream_NewStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggeredStreamServer).NewStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggeredStream_NewStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggeredStreamServer).NewStream(ctx, req.(*MsgStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggeredStream_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MsgStream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TriggeredStreamServer).Stream(m, &grpc.GenericServerStream[MsgStream, MsgData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TriggeredStream_StreamServer = grpc.ServerStreamingServer[MsgData]

// TriggeredStream_ServiceDesc is the grpc.ServiceDesc for TriggeredStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggeredStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tstream.TriggeredStream",
	HandlerType: (*TriggeredStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTrigger",
			Handler:    _TriggeredStream_NewTrigger_Handler,
		},
		{
			MethodName: "NewStream",
			Handler:    _TriggeredStream_NewStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trigger",
			Handler:       _TriggeredStream_Trigger_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _TriggeredStream_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tstream.proto",
}
